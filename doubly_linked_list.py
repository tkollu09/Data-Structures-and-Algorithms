# -*- coding: utf-8 -*-
"""Doubly_Linked_List.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vAui5EFDfQ1R6M6psicsta7IZUvOmj7V

Node Class
"""

class Node:
  def __init__(self, data = None):
    self.data = data
    self.next = None
    self.prev = None

"""DoublyLinkedList Class"""

class DoublyLinkedList:
  def __init__(self):
    self.head = None
    self.tail = None

  def append(self, data):
    new_node = Node(data)
    if self.head is None:
      self.head = new_node
      self.tail = new_node
      return
    self.tail.next = new_node
    new_node.prev = self.tail
    self.tail = new_node

  def traverse_forward(self):
    current = self.head
    print("Head", end=" -> ")
    while current:
      print(current.data, end=" <-> ")
      current = current.next
    print("None")

  def traverse_backward(self):
    current = self.tail
    print("Tail", end=" -> ")
    while current:
      print(current.data, end=" <-> ")
      current = current.prev
    print("None")

  def insert_at_head(self, data):
    new_node = Node(data)
    if self.head is not None:
      new_node.next = self.head
      self.head.prev = new_node
    self.head = new_node

  def insert_at_tail(self, data):
    new_node = Node(data)
    if self.tail is not None:
      new_node.prev = self.tail
      self.tail.next = new_node
    self.tail = new_node

  def delete_by_value(self, value):
    current = self.head
    while current:
      if current.data == value:
        if current.prev is not None:
          current.prev.next = current.next
        else:
          self.head = current.next
        if current.next is not None:
          current.next.prev = current.prev
        else:
            self.tail = current.prev
        current = current.next
      else:
        current = current.next

  def to_list(self):
    current = self.head
    new_list = []
    while current:
      new_list.append(current.data)
      current = current.next
    return new_list

  def length(self):
    current = self.head
    count = 0
    while current:
      count += 1
      current = current.next
    return count

"""Test Case 1: Insertion, Traversing, Length"""

list = DoublyLinkedList()
list.append(2)
list.insert_at_head(1) #insertion at head
list.insert_at_tail(3) #insertion at tail
list.insert_at_tail(4)
list.traverse_forward() #traversing list forward
list.traverse_backward() #traversing list backward
print("Length:", list.length()) #length verification

"""Test Case 2: Deletion, Traversing, Length"""

list.traverse_forward()
list.traverse_backward()
print("Length:", list.length())
list.delete_by_value(1) #deletion at head
list.delete_by_value(3) #deletion in middle
list.delete_by_value(4) #deletion at tail
list.traverse_forward()
list.traverse_backward()
print("Length:", list.length())

"""Test Case 3: Converting to Python List"""

list.insert_at_head(1)
list.insert_at_tail(3)
list.traverse_forward()
print(list.to_list()) #convertion to python list
print("Length:", list.length())