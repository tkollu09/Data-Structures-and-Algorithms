# -*- coding: utf-8 -*-
"""Stack_LinkedList.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12YEL34iLNOsIqrIIpF_kQ_r4JSDGMBkv

Node Class (Singly Linked List Node)
"""

class Node:
    def __init__(self, data = None):
        self.data = data
        self.next = None

"""Stack Class (Linked List)"""

from sys import maxsize
class Stack:
    def __init__(self):
        self.head = None

    def is_empty(self):
      return self.head is None

    def push(self, data):
      new_node = Node(data)
      new_node.next = self.head
      self.head = new_node

    def pop(self):
      if self.is_empty():
        return str(-maxsize -1)
      temp = self.head
      self.head = self.head.next
      return temp.data


    def peek(self):
      if self.is_empty():
        return str(-maxsize -1)
      return self.head.data

    def size(self):
      count = 0
      current = self.head
      while current:
        count += 1
        current = current.next
      return count

    def display(self):
      current = self.head
      while current:
        print(current.data, end = " ")
        current = current.next
      print()

    def search(self, item) : #Task B Extra Credit
      current = self.head
      count = 0
      while current:
        if current.data == item:
          return count
        count += 1
        current = current.next
      return -1

"""Testing Stack"""

stack = Stack()
print("Is empty:", stack.is_empty())
print("Peek (top value):", stack.peek()) # -max value if there is nothing to peek
stack.push(1) #push
stack.push(2)
stack.push(3)
stack.push(4)
stack.push(5)
stack.display() #display
print("Search:", stack.search(3))
print("Size:", stack.size())
print("Pop:", stack.pop())
stack.display()
print("Peek (top value):", stack.peek())

"""Polish Notation"""

#Task C Extra Credit
expression_a = "3 4 + 2 /" # (3 + 4) / 2 = 3.5
expression_b = "5 5 * 3 +" # (5 * 5) + 3 = 28

def polish_notation(expression):
  stack = Stack()
  for char in expression:
    if char.isdigit():
      stack.push(int(char))
      stack.display
    elif char != " ":
      b = stack.pop()
      a = stack.pop()
      if char == "+":
        stack.push(a + b)
      elif char == "-":
        stack.push(a - b)
      elif char == "*":
        stack.push(a * b)
      elif char == "/":
        stack.push(a / b)
  return stack.pop()

print("Expression A:", polish_notation(expression_a))
print("Expression B:", polish_notation(expression_b))